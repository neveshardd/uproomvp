generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  name                     String?
  fullName                 String?
  avatar                   String?
  password                 String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  companyMemberships       CompanyMember[]
  conversationParticipants ConversationParticipant[]
  sentInvitations          Invitation[]              @relation("InvitationSender")
  messages                 Message[]
  presence                 UserPresence[]

  @@map("users")
}

model Company {
  id            String          @id @default(cuid())
  name          String
  subdomain     String          @unique
  description   String?
  ownerId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  members       CompanyMember[]
  conversations Conversation[]
  invitations   Invitation[]

  @@map("companies")
}

model CompanyMember {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   @default("MEMBER")
  canInvite Boolean  @default(false)
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("company_members")
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  role        String
  token       String    @unique
  companyId   String
  invitedById String
  status      String    @default("PENDING")
  expiresAt   DateTime?
  usedCount   Int       @default(0)
  maxUses     Int       @default(1)
  acceptedAt  DateTime?
  receiverId  String?
  acceptedIp  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation("InvitationSender", fields: [invitedById], references: [id])

  @@map("invitation")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String
  type         String                    @default("DIRECT")
  companyId    String
  createdById  String
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  description  String?
  participants ConversationParticipant[]
  company      Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  createdAt      DateTime     @default(now())
  isArchived     Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  type           String       @default("TEXT")
  conversationId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isPinned       Boolean      @default(false)
  pinnedAt       DateTime?
  pinnedBy       String?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UserPresence {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  status    String   @default("AVAILABLE")
  message   String?
  isOnline  Boolean  @default(true)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("user_presence")
}
